// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    notesLists    NotesList[]
    Note          Note[]
    Event         Event[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Note {
    id            String    @id @default(cuid())
    title         String
    text          String
    list          NotesList @relation(fields: [listId], references: [id])
    listId        String
    sharedWith    User[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    lastUpdatedBy String
}

model NotesList {
    id      String @id @default(cuid())
    name    String
    notes   Note[]
    owner   User   @relation(fields: [ownerId], references: [id])
    ownerId String

    @@unique([name, ownerId])
}

model Event {
    id         String    @id @default(cuid())
    name       String
    date       DateTime
    createdAt  DateTime  @default(now())
    user       User      @relation(fields: [userId], references: [id])
    userId     String
    isCyclic   Boolean?
    timePeriod Int?
    endAt      DateTime?
}
